@page "/events"
@using System.Collections
@inject NotificationService NotificationService
@inject HttpClient HttpClient
@inject NavigationManager _nav_manager
@using System.Text.Json
@using Cafe.dto
@using Cafe.Uitlities
@using global::Shared.Models

@attribute [Authorize]

<RadzenFieldset AllowCollapse="true" Style="width: 700px; margin: 40px auto;" ExpandTitle="Expand events." CollapseTitle="Collapse events."
                ExpandAriaLabel="Expand the list of events." CollapseAriaLabel="Collapse the list of events.">
    <HeaderTemplate>
        <span class="d-inline-flex align-items-center align-middle">
            <RadzenIcon Icon="account_box" class="me-1" /><b>My events</b>
        </span>
    </HeaderTemplate>
    <ChildContent>
        <RadzenDataList PageSize="4" WrapItems="true" AllowPaging="true" 
                        Data="@events" TItem="EventDto">
            <Template Context="myEvent">
                <RadzenCard Style="width: 250px">
                    <div class="row">
                        <div class="col-md-8 text-truncate">
                            <b>@(myEvent.Name)</b>
                        </div>
                <!--        <div class="col-md-4 text-end">
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Text=@myEvent.EntertainerId.ToString() />
                        </div>-->
                    </div>
                    <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                    <div class="d-flex flex-row align-items-center">
                        <div>
                            <h4 class="mb-0">@(myEvent.CafeOwnerName)</h4>
                            <div>@myEvent.EntertainerName</div>
                            <div style="font-size: .8em">@(myEvent.Description)</div>
                        </div>
                    </div>
                                        <hr style="border: none; background-color: rgba(0,0,0,.08); height: 1px; margin: 1rem 0;" />
                    <div class="d-flex flex-row align-items-center">
                        <div>
                            <div class="button-row">
                                <button type="button" ButtonType="ButtonType.Submit" class="acceptbtn" Text="Book now" @onclick="@(() => _nav_manager.NavigateTo($"/BookEvent/{myEvent.Id.ToString()}"))">Book now</button>
                            </div>
                        </div>
                    </div>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </ChildContent>
    <SummaryTemplate>
        <RadzenCard class="mt-3">
            <b>@events.Count() Events</b>
        </RadzenCard>
    </SummaryTemplate>
</RadzenFieldset>
@*
@foreach (EventDto e in events)
{
    <RadzenStack Gap="1rem" Class="rz-p-sm-12">
        <RadzenAccordion Multiple="true">
            <Items>
                <RadzenAccordionItem ExpandTitle="@e.Name" Text=@e.Name>
                    <div class="row">
                        <p class="col-12" style="text-align: center">@e.Description</p>
                    </div>
                    <p>
                        @e.Id
                    </p>
                    <div class="row">
                        <div class="button-row">
                            <p class="col-12" style="text-align: center">Description: @e.Description</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="button-row">
                                <button type="button" ButtonType="ButtonType.Submit" class="acceptbtn" Text="Book now" @onclick="@(() => _nav_manager.NavigateTo($"/BookEvent/{e.Id.ToString()}"))">Book now</button>
                            </div>
                        </div>
                    </div>
                </RadzenAccordionItem>
            </Items>
        </RadzenAccordion>
</RadzenStack>
*@
}
@code {
    List<EventDto> events = new List<EventDto>();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("http://localhost:8080/api/events");
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                events = await JsonSerializer.DeserializeAsync<List<EventDto>>(stream, JsonOptionsHelper.DefaultJsonSerializerOptions) ?? new List<EventDto>();
            }
            else
            {
                ShowErrorNotification("An error occurred while processing your request.");
            }
        }
        catch (HttpRequestException)
        {
            ShowErrorNotification("Server is down or there's an issue with the request.");
        }
        catch (Exception ex)
        {
            ShowErrorNotification($"An unexpected error occurred: {ex.Message}");
        }
    }
    private void ShowErrorNotification(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message, Detail = "Unable to create the event", Duration = 4000 });
    }

    private void navigate()
    {
        _nav_manager.NavigateTo("create-event");
    }
}