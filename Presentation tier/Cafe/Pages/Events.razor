@page "/events"
@using Cafe.Models
@using System.Collections
@using System.Net
@using System.Net.Http.Headers
@using System.Text.Json
@using Cafe.Uitlities
@inject NotificationService NotificationService
@inject HttpClient HttpClient
@inject NavigationManager _nav_manager
<h3>Events</h3>
@foreach (EventPage e in events)
{
    <RadzenStack Gap="1rem" Class="rz-p-sm-12">
        <RadzenAccordion Multiple="true">
            <Items>
                <RadzenAccordionItem ExpandTitle="@e.Name" Text=@e.Name>
                    <div class="row">
                        <p class="col-12" style="text-align: end">@e.Date</p>
                        <p class="col-12" style="text-align: center">@e.Description</p>
                    </div>
                    <p>
                        @e.Id
                    </p>
                    <div class="row">
                        <div class="col-12">
                            <div class="button-row">
                                <button type="button" ButtonType="ButtonType.Submit" class="acceptbtn" Text="Book now" @onclick="@(() => _nav_manager.NavigateTo($"/BookEvent/{e.Id.ToString()}"))">Book now</button>
                            </div>
                        </div>
                    </div>
                </RadzenAccordionItem>
            </Items>
        </RadzenAccordion>
</RadzenStack>

}
@code {
<<<<<<< Updated upstream
    List<Event> events=new List<Event>();
=======
    List<EventPage> events = new ();
>>>>>>> Stashed changes
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("http://localhost:8080/api/events");
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStreamAsync();
                events = await JsonSerializer.DeserializeAsync<List<EventPage>>(stream, JsonOptionsHelper.DefaultJsonSerializerOptions) ?? new List<EventPage>();
            }
            else
            {
                ShowErrorNotification("An error occurred while processing your request.");
            }
        }
        catch (HttpRequestException)
        {
            ShowErrorNotification("Server is down or there's an issue with the request.");
        }
        catch (Exception ex)
        {
            ShowErrorNotification($"An unexpected error occurred: {ex.Message}");
        }
    }


    private void ShowErrorNotification(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message, Detail = "Unable to create the event", Duration = 4000 });
    }

    private void navigate()
    {
        _nav_manager.NavigateTo("create-event");
    }
    

}