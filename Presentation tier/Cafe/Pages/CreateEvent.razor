@page "/create-event"
@using Cafe.Services
@using Cafe.Services.Http
@using System.Globalization
@using Blazored.LocalStorage
@using global::Shared.Models
@inject NotificationService NotificationService
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService JwtAuthService
@inject ILocalStorageService _LocalStorage;
@attribute [Authorize("MustBeCafeOwner")]

<h3>Create event</h3>

<RadzenTemplateForm TItem="Event" Data=Event Submit="@SubmitEvent">
    <RadzenTextBox @bind-Value="Event.Name" Name="Name" Placeholder="Event Name" Style="width:100%; margin-bottom: 20px;" />
    <RadzenTextBox @bind-Value="Event.Description" Name="Description" Placeholder="Description" Style="width:100%; margin-bottom: 20px;" />
    <div class="rz-p-sm-12 rz-text-align-center">
        <RadzenDropDown @bind-Value="Event.EntertainerId" Data=@entertainers TextProperty="FirstName" ValueProperty="Id" Style="width: 100%; max-width: 400px;" />
    </div>
    
    <RadzenNumeric @bind-Value="Event.AvailablePlaces" />
 <RadzenDatePicker @bind-Value="Event.Start" ShowTime="true" HourFormat="12" Culture='CultureInfo.CreateSpecificCulture("en-GB")' DateFormat="yyyy/MM/dd hh:mm" /> 
     <RadzenDatePicker @bind-Value="Event.End" ShowTime="true" HourFormat="12" Culture='CultureInfo.CreateSpecificCulture("en-GB")' DateFormat="yyyy/MM/dd hh:mm" /> 

    <RadzenButton ButtonType="ButtonType.Submit" Text="Create Event" />
</RadzenTemplateForm>

@code {
    public Event Event = new();
    IEnumerable<User> entertainers;

    protected override async Task OnInitializedAsync()
    {
        var jwt = await _LocalStorage.GetItemAsStringAsync("token");
        Console.WriteLine("JWT :: " + jwt);;
        
        CultureInfo provider = CultureInfo.CreateSpecificCulture("en-GB");

        entertainers = new List<User>
        {
        };
        entertainers = await HttpClient.GetFromJsonAsync<List<User>>("http://localhost:8080/api/users");
        Event.CafeOwnerId = await JwtAuthService.GetId(jwt);
        Event.EntertainerId = Guid.NewGuid();
    }

    private async Task SubmitEvent(Event evt)
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("http://localhost:8080/api/events", evt);
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessNotification();
                ResetForm();
            }
            else
            {
                ShowErrorNotification("An error occurred while processing your request.");
            }
        }
        catch (HttpRequestException)
        {
            ShowErrorNotification("Server is down or there's an issue with the request.");
        }
        catch (Exception ex)
        {
            ShowErrorNotification($"An unexpected error occurred: {ex.Message}");
        }
    }

    private void ShowSuccessNotification()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Event created", Detail = "Success Detail", Duration = 4000 });
    }

    private void ShowErrorNotification(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message, Detail = "Unable to create the event", Duration = 4000 });
    }

    private void ResetForm()
    {
        Event = new();
    //Event.EntertainerId = entertainers.First().Id;
    }


}
