@page "/Schedule"
@using Cafe.dto
@using Cafe.Services
@using Blazored.LocalStorage
@using global::Shared.Models
@inject NotificationService NotificationService
@inject HttpClient httpClient
@inject ILocalStorageService _LocalStorage;
@inject IAuthService AuthService;

@attribute [Authorize("MustBeEntertainer")]



<RadzenScheduler @ref=@Scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Event" Data=@_events 
    TextProperty="Name" SelectedIndex="2" StartProperty="Start" EndProperty="End">
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>
@code {
    RadzenScheduler<Event> Scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    IList<EventDto> appointments = new List<EventDto>
    {
      /*  new EventDto { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Name = "Birthday"  },
        new EventDto { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Name = "Birthday"  },
        new EventDto { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Name = "Birthday"  },
        new EventDto { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Name = "Birthday"  },*/
     };

    IList<Event> _events = new List<Event>();
    protected async override void OnInitialized()
    {
        string token = await _LocalStorage.GetItemAsStringAsync("token");
        Guid id = await AuthService.GetId(token);
        var response = await httpClient.GetAsync("http://localhost:8080/api/events/users/" + id);
    if (response.IsSuccessStatusCode)
        {
            ShowSuccessNotification();
        }
        else
        {
            ShowErrorNotification("An error occurred while processing your request.");
        }
        appointments = await response.ReadAsync<List<EventDto>>();
        DateTime start = DateTime.Parse(appointments[0].Start);
        foreach (EventDto appointment in appointments)
        {
            Event _event = new Event()
            {
                Id = appointment.Id,
                Start = DateTime.Parse(appointment.Start),
                End = DateTime.Parse(appointment.End),
                Name = appointment.Name
            };
            _events.Add(_event);
        }
    }
    private void ShowSuccessNotification()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Event created", Detail = "Success Detail", Duration = 4000 });
    }
    private void ShowErrorNotification(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message, Detail = "Unable to create the event", Duration = 4000 });
    }   
    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    
}