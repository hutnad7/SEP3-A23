@page "/BookEvent/{Id}"
@inject HttpClient HttpClient
@inject NotificationService NotificationService
@using global::Shared.Models
@using Blazored.LocalStorage
@using Cafe.Services
@inject ILocalStorageService _LocalStorage;
@inject IAuthService AuthService;
@attribute [Authorize]

<h3>BookEvent</h3>

<RadzenTemplateForm TItem="Booking" Data="booking" Submit="@Submit">
    <RadzenTextBox @bind-Value="booking.FirstName" Name="First Name" Placeholder="First Name" Style="width:100%; margin-bottom: 20px;" />
    <RadzenTextBox @bind-Value="booking.LastName" Name="Last Name" Placeholder="Last Name" Style="width:100%; margin-bottom: 20px;" />
    <div class="rz-p-12 rz-text-align-center">
        <RadzenNumeric @bind-Value=@booking.numberOfPeople />
    </div>
    <RadzenButton ButtonType="ButtonType.Submit" Text="Book now" />
</RadzenTemplateForm>


@code {

    [Parameter]
    public string Id { get; set; }

    public Booking booking = new();

    protected override async void OnInitialized()
    {
        booking.EventId = Guid.Parse(Id);
        string token =  await _LocalStorage.GetItemAsStringAsync("token");
        booking.UserId = await AuthService.GetId(token);
    }

    private async Task Submit(Booking _booking)
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("http://localhost:8080/api/events/booking", booking);
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessNotification();
            }
            else
            {
                ShowErrorNotification("An error occurred while processing your request.");
            }
        }
        catch (HttpRequestException)
        {
            ShowErrorNotification("Server is down or there's an issue with the request.");
        }
        catch (Exception ex)
        {
            ShowErrorNotification($"An unexpected error occurred: {ex.Message}");
        }
    }

    private void ShowErrorNotification(string message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = message, Detail = "Unable to book the event", Duration = 4000 });
    }
    
    private void ShowSuccessNotification()
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Booking created", Detail = "Success Detail", Duration = 4000 });
    }
}